import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Modal,
  ScrollView,
  TouchableOpacity,
  TextInput,
  Alert,
  KeyboardAvoidingView,
  Platform,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useApp } from '../contexts/AppContext';
import { FirebasePatientService, FirebaseDoctorService, FirebaseRoomService } from '../services/firebaseHospitalServices';
import { Colors } from '../constants/theme';
import ModalDropdown from './ModalDropdown';

// Function to generate invoice for patient registration
const generateInvoiceForPatient = async (patientData, initialPayment, addInvoiceFn) => {
  try {
    console.log('📄 Generating invoice for patient registration:', patientData.name);
    
    const invoiceNumber = `INV-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
    const currentDate = new Date();
    const dueDate = new Date();
    dueDate.setDate(currentDate.getDate() + 30); // 30 days from now
    
    const invoice = {
      invoiceNumber,
      patientId: patientData.id,
      patientName: patientData.name,
      description: `Patient Registration Invoice - ${patientData.patientType} ${patientData.department}`,
      issueDate: currentDate.toISOString().split('T')[0],
      dueDate: dueDate.toISOString().split('T')[0],
      status: initialPayment > 0 ? 'paid' : 'draft',
      totalAmount: initialPayment > 0 ? initialPayment : patientData.paymentDetails.totalAmount,
      items: [
        {
          name: `${patientData.patientType} Registration`,
          description: `${patientData.patientType} patient registration - ${patientData.department}${initialPayment > 0 ? ` (Partial Payment: ₹${initialPayment})` : ''}`,
          quantity: 1,
          rate: initialPayment > 0 ? initialPayment : patientData.paymentDetails.totalAmount,
          amount: initialPayment > 0 ? initialPayment : patientData.paymentDetails.totalAmount
        }
      ],
      notes: `Invoice auto-generated for patient registration on ${currentDate.toLocaleDateString('en-IN')}${initialPayment > 0 ? `. Payment of ₹${initialPayment} received.` : '. Awaiting payment.'}${initialPayment > 0 && initialPayment < patientData.paymentDetails.totalAmount ? ` Remaining amount: ₹${patientData.paymentDetails.totalAmount - initialPayment}` : ''}`,
      terms: 'Payment due within 30 days from invoice date',
      createdAt: currentDate.toISOString(),
      updatedAt: currentDate.toISOString(),
      paymentMethod: patientData.paymentDetails.payments[0]?.method || 'Cash',
      serviceType: patientData.patientType, // OP or IP
      isAutoGenerated: true,
      registrationDate: patientData.registrationDate,
      // Payment tracking information
      paymentDetails: {
        fullAmount: patientData.paymentDetails.totalAmount,
        actualAmountPaid: initialPayment,
        remainingAmount: Math.max(0, patientData.paymentDetails.totalAmount - initialPayment),
        paymentDate: currentDate,
        paymentMethod: patientData.paymentDetails.payments[0]?.method || 'Cash',
        transactionId: patientData.paymentDetails.payments[0]?.transactionId || null
      }
    };

    // Use the provided addInvoice function if available
    if (addInvoiceFn) {
      const result = await addInvoiceFn(invoice);
      console.log('📄 Patient registration invoice generated successfully:', invoiceNumber);
      return result;
    } else {
      // Fallback to direct Firebase service
      const { FirebaseInvoiceService } = await import('../services/firebaseHospitalServices');
      const result = await FirebaseInvoiceService.addInvoice(invoice);
      
      if (result.success) {
        console.log('📄 Patient registration invoice generated successfully:', invoiceNumber);
        return invoice;
      } else {
        throw new Error(result.error || 'Failed to save invoice');
      }
    }
  } catch (error) {
    console.error('❌ Error generating patient registration invoice:', error);
    throw error;
  }
};

const PatientRegistrationModal = ({ visible, onClose, onSuccess, appointment }) => {
  const { addPatient, addInvoice } = useApp();
  
  // State for backend data
  const [doctors, setDoctors] = useState([]);
  const [rooms, setRooms] = useState([]);
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  
  const [formData, setFormData] = useState({
    patientType: 'OP',
    fullName: appointment?.patientName || '',
    age: appointment?.patientAge?.toString() || '',
    gender: appointment?.patientGender || 'Male',
    bloodGroup: '',
    phoneNumber: appointment?.patientPhone || appointment?.contactNumber || '',
    emergencyContact: '',
    address: '',
    doctor: appointment?.doctorName || '',
    department: appointment?.department || appointment?.serviceName || '',
    referredBy: '',
    symptoms: appointment?.symptoms || appointment?.notes || '',
    allergies: '',
    roomNumber: '',
    bedNumber: '',
    totalAmount: '',
    initialPayment: '',
    paymentMethod: 'Cash',
    paymentType: 'Registration Fee',
    testOption: '',
  });

  const [modalDropdownData, setModalDropdownData] = useState({
    visible: false,
    field: '',
    options: [],
    title: '',
    valueKey: 'value',
    labelKey: 'label'
  });

  const patientTypes = [
    { label: 'Out-Patient (OP)', value: 'OP', description: 'OP: Outpatient consultations' },
    { label: 'In-Patient (IP)', value: 'IP', description: 'IP: Admitted patients' },
  ];

  const genders = ['Male', 'Female', 'Other'];
  
  const departments = [
    'General Medicine',
    'Cardiology', 
    'Orthopedics',
    'Gynecology',
    'Pediatrics',
    'Dermatology',
    'ENT',
    'Ophthalmology', 
    'Dentistry',
    'Emergency',
    'Neurology',
    'Psychiatry',
    'Radiology',
    'Pathology',
    'Anesthesiology',
    'Surgery',
    'Oncology',
    'Nephrology',
    'Gastroenterology',
    'Pulmonology',
    'Urology',
    'Endocrinology',
    'Rheumatology',
    'Hematology',
    'Immunology',
    'Infectious Diseases',
    'Physical Medicine',
    'Rehabilitation',
    'Preventive Medicine',
    'Sports Medicine',
    'Occupational Medicine',
    'Geriatrics',
    'Palliative Care',
    'Critical Care',
    'Plastic Surgery',
    'Vascular Surgery',
    'Thoracic Surgery',
    'Neurosurgery',
    'Oral Surgery',
    'Interventional Radiology',
  ];

  // Combined test dropdown with many options
  const testManyOptions = [
    'Option 1', 'Option 2', 'Option 3', 'Option 4', 'Option 5',
    'Option 6', 'Option 7', 'Option 8', 'Option 9', 'Option 10',
    'Option 11', 'Option 12', 'Option 13', 'Option 14', 'Option 15',
    'Option 16', 'Option 17', 'Option 18', 'Option 19', 'Option 20',
    'Option 21', 'Option 22', 'Option 23', 'Option 24', 'Option 25',
    'Option 26', 'Option 27', 'Option 28', 'Option 29', 'Option 30',
  ];

  const paymentMethods = ['Cash', 'Card', 'Online', 'UPI', 'Bank Transfer', 'Cheque'];
  
  const paymentTypes = [
    'Registration Fee',
    'Consultation Fee',
    'Treatment Fee',
    'Room Charges',
    'Medicine Charges',
    'Test Charges',
    'Surgery Fee',
    'Emergency Fee',
    'Other',
  ];

  // Fetch doctors and rooms from backend
  const fetchBackendData = async () => {
    setLoading(true);
    try {
      console.log('🔄 Fetching doctors and rooms from Firebase...');
      
      // Fetch doctors
      const doctorsResult = await FirebaseDoctorService.getDoctors();
      if (doctorsResult.success) {
        console.log(`✅ Fetched ${doctorsResult.data.length} doctors from Firebase`);
        setDoctors(doctorsResult.data);
      } else {
        console.warn('⚠️ Failed to fetch doctors:', doctorsResult.warning || 'Unknown error');
        setDoctors([]);
      }

      // Fetch rooms with available beds
      const roomsResult = await FirebaseRoomService.getRooms();
      if (roomsResult.success) {
        console.log(`✅ Fetched ${roomsResult.data.length} rooms from Firebase`);
        // Filter only rooms with available beds (available for admission)
        console.log('🏥 Raw rooms data from Firebase:', roomsResult.data.map(r => ({ id: r.id, roomNumber: r.roomNumber, status: r.status, availableBeds: r.availableBeds })));
        
        const availableRooms = roomsResult.data.filter(room => {
          // Exclude rooms under maintenance or out of order
          if (room.status === 'Under Maintenance' || room.status === 'Out of Order') {
            return false;
          }
          // Include rooms that have available beds
          return (room.availableBeds || []).length > 0;
        }).map(room => ({
          ...room,
          // Ensure bed data is properly formatted
          beds: room.availableBeds || [],
          bedLabels: room.bedLabels || []
        }));
        
        setRooms(availableRooms);
        console.log(`✅ ${availableRooms.length} rooms available with beds`);
        console.log('🏥 Processed available rooms:', availableRooms.map(r => ({ id: r.id, roomNumber: r.roomNumber, availableBeds: r.availableBeds })));
      } else {
        console.warn('⚠️ Failed to fetch rooms:', roomsResult.warning || 'Unknown error');
        // Fallback to empty rooms array if Firebase fails
        setRooms([]);
      }
    } catch (error) {
      console.error('❌ Error fetching backend data:', error);
      // Set empty fallback data
      setDoctors([]);
      setRooms([]);
    } finally {
      setLoading(false);
    }
  };

  // Load data when modal opens
  useEffect(() => {
    if (visible) {
      fetchBackendData();
    }
  }, [visible]);

  // Update form data when appointment changes
  useEffect(() => {
    if (appointment) {
      setFormData(prevData => ({
        ...prevData,
        fullName: appointment.patientName || '',
        age: appointment.patientAge?.toString() || '',
        gender: appointment.patientGender || 'Male',
        phoneNumber: appointment.patientPhone || appointment.contactNumber || '',
        doctor: appointment.doctorName || '',
        department: appointment.department || appointment.serviceName || '',
        symptoms: appointment.symptoms || appointment.notes || '',
      }));
    }
  }, [appointment]);

  // Get available beds for selected room
  const getAvailableBeds = () => {
    if (!formData.roomNumber) {
      console.log('🛏️ No room selected for beds');
      return [];
    }
    
    const selectedRoom = rooms.find(room => 
      room.roomNumber === formData.roomNumber || room.roomNumber === formData.roomNumber.toString()
    );
    
    if (!selectedRoom) {
      console.log('🛏️ Room not found:', formData.roomNumber);
      return [];
    }
    
    console.log('🛏️ Selected room:', selectedRoom.roomNumber, 'Available beds:', selectedRoom.availableBeds);
    
    // Return available beds as string array for dropdown
    const availableBeds = selectedRoom.availableBeds || selectedRoom.beds || [];
    
    // Ensure we return an array of strings for the dropdown
    const bedOptions = availableBeds.map(bed => typeof bed === 'string' ? bed : bed.bedNumber || bed);
    
    console.log('🛏️ Bed options for dropdown:', bedOptions);
    return bedOptions;
  };

  const validateForm = () => {
    const required = ['fullName', 'age', 'phoneNumber', 'totalAmount'];
    const missing = required.filter(field => !formData[field].trim());
    
    if (missing.length > 0) {
      Alert.alert('Validation Error', 'Please fill all required fields marked with *');
      return false;
    }

    if (!/^\d+$/.test(formData.age) || parseInt(formData.age) < 1 || parseInt(formData.age) > 120) {
      Alert.alert('Invalid Age', 'Please enter a valid age between 1 and 120');
      return false;
    }

    if (!/^\+?[\d\s\-\(\)]{10,15}$/.test(formData.phoneNumber.replace(/\s/g, ''))) {
      Alert.alert('Invalid Phone', 'Please enter a valid phone number');
      return false;
    }

    // Validate payment amounts
    const totalAmount = parseFloat(formData.totalAmount);
    const initialPayment = parseFloat(formData.initialPayment) || 0;

    if (isNaN(totalAmount) || totalAmount <= 0) {
      Alert.alert('Invalid Amount', 'Please enter a valid total amount');
      return false;
    }

    if (initialPayment > totalAmount) {
      Alert.alert('Payment Error', 'Initial payment cannot be greater than total amount');
      return false;
    }

    if (formData.patientType === 'IP' && !formData.roomNumber) {
      Alert.alert('Room Required', 'Please select a room number for IP patients');
      return false;
    }

    if (formData.patientType === 'IP' && !formData.bedNumber) {
      Alert.alert('Bed Required', 'Please select a bed number for IP patients');
      return false;
    }

    return true;
  };

  const handleSubmit = async () => {
    if (saving) return; // Prevent double submission
    if (!validateForm()) return;

    setSaving(true);
    try {
      // Generate highly unique patient ID to prevent collisions
      const timestamp = Date.now();
      const randomPart1 = Math.floor(Math.random() * 10000).toString().padStart(4, '0');
      const randomPart2 = Math.floor(Math.random() * 1000).toString().padStart(3, '0');
      const uniqueId = `${timestamp}${randomPart1}${randomPart2}`.slice(-10); // Take last 10 digits
      const patientId = formData.patientType === 'IP' 
        ? `KBR-IP-${new Date().getFullYear()}-${uniqueId}`
        : `KBR-OP-${new Date().getFullYear()}-${uniqueId}`;

      const totalAmount = parseFloat(formData.totalAmount);
      const initialPayment = parseFloat(formData.initialPayment) || 0;

      const newPatient = {
        id: patientId,
        name: formData.fullName,
        age: parseInt(formData.age),
        gender: formData.gender,
        bloodGroup: formData.bloodGroup || 'A+',
        phone: formData.phoneNumber,
        emergencyContact: formData.emergencyContact,
        address: formData.address,
        doctor: formData.doctor,
        department: formData.department,
        referredBy: formData.referredBy,
        symptoms: formData.symptoms,
        allergies: formData.allergies,
        patientType: formData.patientType,
        status: formData.patientType,
        statusText: formData.patientType === 'IP' ? 'Admitted' : 'Consultation',
        statusColor: formData.patientType === 'IP' ? '#007AFF' : '#34C759',
        registrationDate: new Date().toISOString().split('T')[0],
        registrationTime: new Date().toLocaleTimeString(),
        medicalReports: [],
        // Payment Information
        paymentDetails: {
          totalAmount: totalAmount,
          payments: initialPayment > 0 ? [{
            id: `PAY-${Date.now()}-1`,
            amount: initialPayment,
            type: formData.paymentType,
            method: formData.paymentMethod,
            date: new Date().toISOString().split('T')[0],
            time: new Date().toLocaleTimeString(),
            description: `Initial payment for ${formData.paymentType}`,
            transactionId: formData.paymentMethod === 'Online' ? `TXN${Date.now()}` : null,
          }] : [],
          totalPaid: initialPayment,
          dueAmount: totalAmount - initialPayment,
          lastPaymentDate: initialPayment > 0 ? new Date().toISOString().split('T')[0] : null,
        },
        editHistory: [{
          action: 'created',
          timestamp: new Date().toISOString(),
          details: `Patient registered with total amount ₹${totalAmount}${initialPayment > 0 ? `, initial payment ₹${initialPayment}` : ''}`,
        }],
      };

      // Add room and bed details for patients (both IP and OP as requested)
      if (formData.roomNumber && formData.bedNumber) {
        newPatient.room = formData.roomNumber;
        newPatient.bedNo = formData.bedNumber;
        newPatient.admissionDate = newPatient.registrationDate;
        const selectedRoom = rooms.find(room => 
          room.roomNumber === formData.roomNumber || room.roomNumber === formData.roomNumber.toString()
        );
        console.log('🏥 Selected room data:', JSON.stringify(selectedRoom, null, 2));
        console.log('🏥 Available rooms:', rooms.map(r => ({ 
          id: r.id, 
          roomNumber: r.roomNumber, 
          hasId: !!r.id, 
          idType: typeof r.id 
        })));
        
        if (!selectedRoom) {
          console.error('❌ Room not found. Looking for:', formData.roomNumber);
          console.error('❌ Available room numbers:', rooms.map(r => r.roomNumber));
          throw new Error(`Room ${formData.roomNumber} not found in available rooms`);
        }
        
        if (!selectedRoom.id) {
          console.error('❌ Selected room has no ID:', selectedRoom);
          throw new Error(`Room ${formData.roomNumber} does not have a valid Firebase ID`);
        }
        
        newPatient.roomType = selectedRoom?.type || selectedRoom?.roomType || 'General';
        newPatient.roomId = selectedRoom.id;
        
        console.log('🆔 Room ID assigned:', newPatient.roomId, 'Type:', typeof newPatient.roomId);
      }

      console.log('💾 Saving patient to Firebase...', newPatient.name);
      
      // Save patient to Firebase first
      const firebaseResult = await FirebasePatientService.createPatient(newPatient);
      
      if (!firebaseResult.success) {
        throw new Error('Failed to save patient to Firebase database');
      }
      
      console.log('✅ Patient saved to Firebase successfully');

      // Auto-generate invoice if patient has payment details
      if (totalAmount > 0) {
        try {
          console.log('🧾 [PatientRegistration] Generating invoice for new patient with total amount:', totalAmount, 'initial payment:', initialPayment);
          console.log('🧾 [PatientRegistration] addInvoice function available:', typeof addInvoice === 'function');
          await generateInvoiceForPatient(newPatient, initialPayment, addInvoice);
          console.log('🧾 [PatientRegistration] Invoice generation completed successfully');
        } catch (invoiceError) {
          console.error('❌ [PatientRegistration] Error generating invoice:', invoiceError);
          // Don't fail registration if invoice generation fails
        }
      } else {
        console.log('🧾 [PatientRegistration] No invoice generated - total amount is:', totalAmount);
      }

      // If room and bed are assigned, update the room's bed occupancy
      if (formData.roomNumber && formData.bedNumber && newPatient.roomId) {
        try {
          console.log(`🛏️ Assigning bed ${formData.bedNumber} in room ${formData.roomNumber} to patient ${newPatient.name}`);
          
          // Use the new bed assignment system
          await FirebaseRoomService.assignPatientToBed(
            newPatient.roomId, 
            formData.bedNumber, 
            {
              id: patientId,
              name: newPatient.name
            }
          );
          
          console.log('✅ Bed assigned successfully');
        } catch (bedError) {
          console.error('❌ Error assigning bed:', bedError);
          // Don't fail the registration if bed assignment fails
          Alert.alert(
            'Warning',
            `Patient registered successfully but bed assignment failed: ${bedError.message}`,
            [{ text: 'OK' }]
          );
        }
      }
      
      const paymentMessage = initialPayment > 0 
        ? `\nTotal: ₹${totalAmount} | Paid: ₹${initialPayment} | Due: ₹${totalAmount - initialPayment}` 
        : `\nTotal Amount: ₹${totalAmount} | Payment: Pending`;

      const message = formData.patientType === 'IP' 
        ? `Patient registered and admitted successfully!\nID: ${patientId}\nRoom: ${newPatient.room}\nBed: ${newPatient.bedNo}${paymentMessage}`
        : `Patient registered successfully!\nID: ${patientId}${paymentMessage}`;
      
      Alert.alert(
        'Success',
        message,
        [
          {
            text: 'OK',
            onPress: () => {
              onSuccess && onSuccess(newPatient);
              handleClose();
            },
          },
        ]
      );
    } catch (error) {
      console.error('❌ Error registering patient:', error);
      Alert.alert('Error', `Failed to register patient: ${error.message}\nPlease try again.`);
    } finally {
      setSaving(false);
    }
  };

  const handleClose = () => {
    setFormData({
      patientType: 'OP',
      fullName: appointment?.patientName || '',
      age: appointment?.patientAge?.toString() || '',
      gender: appointment?.patientGender || 'Male',
      bloodGroup: '',
      phoneNumber: appointment?.patientPhone || appointment?.contactNumber || '',
      emergencyContact: '',
      address: '',
      doctor: appointment?.doctorName || '',
      department: appointment?.department || appointment?.serviceName || '',
      referredBy: '',
      symptoms: appointment?.symptoms || appointment?.notes || '',
      allergies: '',
      roomNumber: '',
      bedNumber: '',
      totalAmount: '',
      initialPayment: '',
      paymentMethod: 'Cash',
      paymentType: 'Registration Fee',
    });
    setModalDropdownData({
      visible: false,
      field: '',
      options: [],
      title: '',
      valueKey: 'value',
      labelKey: 'label'
    });
    // Reset backend data
    setDoctors([]);
    setRooms([]);
    setLoading(false);
    setSaving(false);
    onClose();
  };

  const openDropdown = (field, options, valueKey = 'value', labelKey = 'label') => {
    const title = `Select ${field.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}`;
    setModalDropdownData({
      visible: true,
      field,
      options: options && Array.isArray(options) ? options : [],
      title,
      valueKey,
      labelKey
    });
  };

  const handleDropdownSelect = (option) => {
    const { field, valueKey, labelKey } = modalDropdownData;
    const value = typeof option === 'object' ? option[valueKey] : option;
    const label = typeof option === 'object' ? option[labelKey] : option;
    
    setFormData(prev => ({ 
      ...prev, 
      [field]: field === 'doctor' ? label : value,
      ...(field === 'roomNumber' ? { bedNumber: '' } : {})
    }));
  };

  const renderDropdown = (field, options, valueKey = 'value', labelKey = 'label') => (
    <View style={styles.dropdownContainer}>
      <TouchableOpacity
        style={styles.dropdownButton}
        onPress={() => openDropdown(field, options, valueKey, labelKey)}
      >
        <Text style={[styles.dropdownText, !formData[field] && styles.placeholderText]}>
          {formData[field] || `Select ${field.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}`}
        </Text>
        <Ionicons 
          name="chevron-down" 
          size={16} 
          color="#666" 
        />
      </TouchableOpacity>
    </View>
  );

  return (
    <Modal visible={visible} animationType="slide" presentationStyle="pageSheet">
      <KeyboardAvoidingView 
        style={styles.container}
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      >
        {/* Header */}
        <View style={styles.header}>
          <View style={styles.headerContent}>
            <Text style={styles.headerTitle}>
              {appointment ? 'Admit Patient from Appointment' : 'Register New Patient'}
            </Text>
          </View>
          <TouchableOpacity style={styles.closeButton} onPress={handleClose}>
            <Ionicons name="close" size={24} color="#666" />
          </TouchableOpacity>
        </View>

        <ScrollView 
          style={styles.content}
          showsVerticalScrollIndicator={false}
          keyboardShouldPersistTaps="always"
        >
          {/* Appointment Info Message */}
          {appointment && (
            <View style={styles.appointmentInfo}>
              <Ionicons name="information-circle" size={20} color={Colors.kbrBlue} />
              <Text style={styles.appointmentInfoText}>
                Pre-filled with appointment details for {appointment.patientName}
              </Text>
            </View>
          )}

          {/* Patient Type */}
          <View style={styles.section}>
            <Text style={styles.sectionLabel}>
              Patient Type <Text style={styles.required}>*</Text>
            </Text>
            {renderDropdown('patientType', patientTypes)}
            <Text style={styles.helpText}>IP: Admitted patients | OP: Outpatient consultations</Text>
          </View>

          {/* Personal Information */}
          <View style={styles.row}>
            <View style={[styles.section, styles.flex1]}>
              <Text style={styles.sectionLabel}>
                Full Name <Text style={styles.required}>*</Text>
              </Text>
              <TextInput
                style={styles.input}
                placeholder="Enter full name"
                value={formData.fullName}
                onChangeText={(text) => setFormData(prev => ({ ...prev, fullName: text }))}
              />
            </View>
            
            <View style={[styles.section, styles.flex1, styles.marginLeft]}>
              <Text style={styles.sectionLabel}>
                Age <Text style={styles.required}>*</Text>
              </Text>
              <TextInput
                style={styles.input}
                placeholder="Age"
                value={formData.age}
                keyboardType="numeric"
                onChangeText={(text) => setFormData(prev => ({ ...prev, age: text }))}
              />
            </View>
          </View>

          {/* Gender and Blood Group */}
          <View style={styles.row}>
            <View style={[styles.section, styles.flex1]}>
              <Text style={styles.sectionLabel}>
                Gender <Text style={styles.required}>*</Text>
              </Text>
              {renderDropdown('gender', genders)}
            </View>
            
            <View style={[styles.section, styles.flex1, styles.marginLeft]}>
              <Text style={styles.sectionLabel}>Blood Group</Text>
              <TextInput
                style={styles.input}
                placeholder="e.g., O+, A+, B+"
                value={formData.bloodGroup}
                onChangeText={(text) => setFormData(prev => ({ ...prev, bloodGroup: text }))}
              />
            </View>
          </View>

          {/* Contact Information */}
          <View style={styles.section}>
            <Text style={styles.sectionLabel}>
              Phone Number <Text style={styles.required}>*</Text>
            </Text>
            <TextInput
              style={styles.input}
              placeholder="+91 XXXXX XXXXX"
              value={formData.phoneNumber}
              keyboardType="phone-pad"
              onChangeText={(text) => setFormData(prev => ({ ...prev, phoneNumber: text }))}
            />
          </View>

          {/* Test Dropdown with Many Options */}
          <View style={styles.section}>
            <Text style={styles.sectionLabel}>
              Test Dropdown (Scroll Test)
            </Text>
            {renderDropdown('testOption', testManyOptions)}
            <Text style={styles.helpText}>This dropdown has 30 options - test scrolling</Text>
          </View>

          <View style={styles.section}>
            <Text style={styles.sectionLabel}>Emergency Contact</Text>
            <TextInput
              style={styles.input}
              placeholder="+91 XXXXX XXXXX"
              value={formData.emergencyContact}
              keyboardType="phone-pad"
              onChangeText={(text) => setFormData(prev => ({ ...prev, emergencyContact: text }))}
            />
          </View>

          <View style={styles.section}>
            <Text style={styles.sectionLabel}>Address</Text>
            <TextInput
              style={[styles.input, styles.textArea]}
              placeholder="Full address"
              value={formData.address}
              multiline
              numberOfLines={3}
              onChangeText={(text) => setFormData(prev => ({ ...prev, address: text }))}
            />
          </View>

          {/* Medical Information */}
          <View style={styles.row}>
            <View style={[styles.section, styles.flex1]}>
              <Text style={styles.sectionLabel}>
                Doctor <Text style={styles.required}>*</Text>
              </Text>
              {loading ? (
                <View style={styles.loadingContainer}>
                  <Text style={styles.loadingText}>Loading doctors...</Text>
                </View>
              ) : (
                renderDropdown('doctor', doctors, 'id', 'name')
              )}
              <Text style={styles.helpText}>
                {doctors.length === 0 ? 'No doctors available' : `${doctors.length} doctors available`}
              </Text>
            </View>
            
            <View style={[styles.section, styles.flex1, styles.marginLeft]}>
              <Text style={styles.sectionLabel}>
                Department <Text style={styles.required}>*</Text>
              </Text>
              <TextInput
                style={styles.input}
                placeholder="Enter department (e.g., Cardiology)"
                value={formData.department}
                onChangeText={(text) => setFormData(prev => ({ ...prev, department: text }))}
              />
              <Text style={styles.helpText}>Manually enter the department name</Text>
            </View>
          </View>

          {/* Room Assignment (Available for all patient types) */}
          <View style={styles.roomAssignmentSection}>
            <Text style={styles.roomSectionTitle}>
              <Ionicons name="bed" size={18} color="#4A90E2" /> Room & Bed Assignment
            </Text>
            <Text style={styles.roomSectionSubtitle}>
              {formData.patientType === 'IP' 
                ? 'Required for admitted patients' 
                : 'Optional for outpatient consultations'}
            </Text>
            
            <View style={styles.row}>
              <View style={[styles.section, styles.flex1]}>
                <Text style={styles.sectionLabel}>
                  Room Number {formData.patientType === 'IP' && <Text style={styles.required}>*</Text>}
                </Text>
                {loading ? (
                  <View style={styles.loadingContainer}>
                    <Text style={styles.loadingText}>Loading rooms...</Text>
                  </View>
                ) : (
                  renderDropdown('roomNumber', rooms, 'roomNumber', 'roomNumber')
                )}
                <Text style={styles.helpText}>
                  {rooms.length === 0 ? 'No available rooms' : `${rooms.length} available rooms`}
                </Text>
              </View>
              
              <View style={[styles.section, styles.flex1, styles.marginLeft]}>
                <Text style={styles.sectionLabel}>
                  Bed Number {formData.patientType === 'IP' && <Text style={styles.required}>*</Text>}
                </Text>
                {renderDropdown('bedNumber', getAvailableBeds())}
                {formData.roomNumber && (
                  <Text style={styles.helpText}>
                    Available beds in Room {formData.roomNumber}
                  </Text>
                )}
              </View>
            </View>
          </View>

          <View style={styles.section}>
            <Text style={styles.sectionLabel}>Referred By</Text>
            <TextInput
              style={styles.input}
              placeholder="Referring doctor/hospital"
              value={formData.referredBy}
              onChangeText={(text) => setFormData(prev => ({ ...prev, referredBy: text }))}
            />
          </View>

          {/* Payment Information Section */}
          <View style={styles.paymentSection}>
            <Text style={styles.paymentSectionTitle}>
              <Ionicons name="card" size={18} color="#EF4444" /> Payment Details
            </Text>
            
            <View style={styles.row}>
              <View style={[styles.section, styles.flex1]}>
                <Text style={styles.sectionLabel}>
                  Total Amount <Text style={styles.required}>*</Text>
                </Text>
                <TextInput
                  style={styles.input}
                  placeholder="₹ 0.00"
                  value={formData.totalAmount}
                  keyboardType="numeric"
                  onChangeText={(text) => setFormData(prev => ({ ...prev, totalAmount: text }))}
                />
                <Text style={styles.helpText}>Total treatment/service cost</Text>
              </View>
              
              <View style={[styles.section, styles.flex1, styles.marginLeft]}>
                <Text style={styles.sectionLabel}>Initial Payment</Text>
                <TextInput
                  style={styles.input}
                  placeholder="₹ 0.00"
                  value={formData.initialPayment}
                  keyboardType="numeric"
                  onChangeText={(text) => setFormData(prev => ({ ...prev, initialPayment: text }))}
                />
                <Text style={styles.helpText}>Amount paid during registration</Text>
              </View>
            </View>

            <View style={styles.row}>
              <View style={[styles.section, styles.flex1]}>
                <Text style={styles.sectionLabel}>Payment Method</Text>
                {renderDropdown('paymentMethod', paymentMethods)}
              </View>
              
              <View style={[styles.section, styles.flex1, styles.marginLeft]}>
                <Text style={styles.sectionLabel}>Payment Type</Text>
                {renderDropdown('paymentType', paymentTypes)}
              </View>
            </View>

            {/* Payment Summary */}
            {formData.totalAmount && (
              <View style={styles.paymentSummary}>
                <Text style={styles.summaryTitle}>Payment Summary</Text>
                <View style={styles.summaryRow}>
                  <Text style={styles.summaryLabel}>Total Amount:</Text>
                  <Text style={styles.summaryValue}>₹{formData.totalAmount}</Text>
                </View>
                <View style={styles.summaryRow}>
                  <Text style={styles.summaryLabel}>Initial Payment:</Text>
                  <Text style={styles.summaryValue}>₹{formData.initialPayment || '0'}</Text>
                </View>
                <View style={[styles.summaryRow, styles.summaryTotal]}>
                  <Text style={styles.summaryLabelTotal}>Due Amount:</Text>
                  <Text style={styles.summaryValueTotal}>
                    ₹{(parseFloat(formData.totalAmount) - parseFloat(formData.initialPayment || 0)).toFixed(2)}
                  </Text>
                </View>
              </View>
            )}
          </View>

          <View style={styles.section}>
            <Text style={styles.sectionLabel}>Symptoms/Reason for Visit</Text>
            <TextInput
              style={[styles.input, styles.textArea]}
              placeholder="Symptoms and reason for visit"
              value={formData.symptoms}
              multiline
              numberOfLines={4}
              onChangeText={(text) => setFormData(prev => ({ ...prev, symptoms: text }))}
            />
          </View>

          <View style={styles.section}>
            <Text style={styles.sectionLabel}>Allergies</Text>
            <TextInput
              style={[styles.input, styles.textArea]}
              placeholder="Known allergies"
              value={formData.allergies}
              multiline
              numberOfLines={3}
              onChangeText={(text) => setFormData(prev => ({ ...prev, allergies: text }))}
            />
          </View>

          {/* Submit Button */}
          <TouchableOpacity 
            style={[styles.submitButton, saving && styles.submitButtonDisabled]} 
            onPress={handleSubmit}
            disabled={saving}
          >
            <Ionicons name={saving ? "hourglass" : "person-add"} size={20} color="#FFF" />
            <Text style={styles.submitButtonText}>
              {saving ? 'Saving to Database...' : appointment ? 'Admit Patient' : 'Register Patient'}
            </Text>
          </TouchableOpacity>

          <View style={styles.bottomSpacing} />
        </ScrollView>
      </KeyboardAvoidingView>

      {/* Modal Dropdown */}
      <ModalDropdown
        visible={modalDropdownData.visible}
        onClose={() => setModalDropdownData(prev => ({ ...prev, visible: false }))}
        options={modalDropdownData.options}
        onSelect={handleDropdownSelect}
        title={modalDropdownData.title}
        valueKey={modalDropdownData.valueKey}
        labelKey={modalDropdownData.labelKey}
      />
    </Modal>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F9FAFB',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    backgroundColor: '#FFFFFF',
    paddingTop: 50,
    paddingBottom: 16,
    paddingHorizontal: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  headerContent: {
    flex: 1,
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#1F2937',
  },
  closeButton: {
    padding: 8,
  },
  content: {
    flex: 1,
    paddingHorizontal: 20,
  },
  section: {
    marginTop: 20,
  },
  row: {
    flexDirection: 'row',
    marginTop: 20,
  },
  flex1: {
    flex: 1,
  },
  marginLeft: {
    marginLeft: 12,
  },
  sectionLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#374151',
    marginBottom: 8,
  },
  required: {
    color: '#EF4444',
  },
  input: {
    borderWidth: 1,
    borderColor: '#D1D5DB',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 12,
    fontSize: 16,
    backgroundColor: '#FFFFFF',
    color: '#1F2937',
  },
  textArea: {
    height: 80,
    textAlignVertical: 'top',
  },
  dropdownContainer: {
    position: 'relative',
    zIndex: 1000,
  },
  dropdownButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    borderWidth: 1,
    borderColor: '#D1D5DB',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 12,
    backgroundColor: '#FFFFFF',
  },
  dropdownText: {
    fontSize: 16,
    color: '#1F2937',
  },
  placeholderText: {
    color: '#9CA3AF',
  },
  dropdownOptions: {
    position: 'absolute',
    top: '100%',
    left: 0,
    right: 0,
    backgroundColor: '#FFFFFF',
    borderWidth: 1,
    borderColor: '#D1D5DB',
    borderRadius: 8,
    marginTop: 4,
    maxHeight: 200,
    zIndex: 9999,
    elevation: 10,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 6,
  },
  dropdownScrollView: {
    maxHeight: 200,
    minHeight: 100,
  },
  dropdownOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    zIndex: 9998,
  },
  dropdownOption: {
    paddingHorizontal: 12,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#F3F4F6',
    backgroundColor: '#FFFFFF',
  },
  lastDropdownOption: {
    borderBottomWidth: 0,
  },
  dropdownOptionText: {
    fontSize: 16,
    color: '#1F2937',
  },
  emptyDropdownOption: {
    paddingHorizontal: 12,
    paddingVertical: 16,
    alignItems: 'center',
  },
  emptyDropdownText: {
    fontSize: 14,
    color: '#9CA3AF',
    fontStyle: 'italic',
  },
  dropdownOptionDescription: {
    fontSize: 12,
    color: '#6B7280',
    marginTop: 2,
  },
  helpText: {
    fontSize: 12,
    color: '#6B7280',
    marginTop: 4,
  },
  submitButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#EF4444',
    paddingVertical: 16,
    borderRadius: 8,
    marginTop: 32,
  },
  submitButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
    marginLeft: 8,
  },
  bottomSpacing: {
    height: 40,
  },
  paymentSection: {
    backgroundColor: '#F8F9FF',
    marginTop: 24,
    padding: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E0E7FF',
  },
  paymentSectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1F2937',
    marginBottom: 16,
    flexDirection: 'row',
    alignItems: 'center',
  },
  paymentSummary: {
    backgroundColor: '#FFFFFF',
    padding: 12,
    borderRadius: 8,
    marginTop: 12,
    borderWidth: 1,
    borderColor: '#E5E7EB',
  },
  summaryTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: '#374151',
    marginBottom: 8,
  },
  summaryRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingVertical: 4,
  },
  summaryLabel: {
    fontSize: 14,
    color: '#6B7280',
  },
  summaryValue: {
    fontSize: 14,
    color: '#1F2937',
    fontWeight: '500',
  },
  summaryTotal: {
    borderTopWidth: 1,
    borderTopColor: '#E5E7EB',
    marginTop: 8,
    paddingTop: 8,
  },
  summaryLabelTotal: {
    fontSize: 15,
    color: '#1F2937',
    fontWeight: '600',
  },
  summaryValueTotal: {
    fontSize: 15,
    color: '#EF4444',
    fontWeight: 'bold',
  },
  loadingContainer: {
    paddingVertical: 16,
    paddingHorizontal: 12,
    backgroundColor: '#F9FAFB',
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#E5E7EB',
    alignItems: 'center',
    justifyContent: 'center',
  },
  loadingText: {
    fontSize: 14,
    color: '#6B7280',
    fontStyle: 'italic',
  },
  submitButtonDisabled: {
    opacity: 0.6,
  },
  roomAssignmentSection: {
    backgroundColor: '#F0F9FF',
    marginTop: 24,
    padding: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#BAE6FD',
  },
  roomSectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1F2937',
    marginBottom: 4,
    flexDirection: 'row',
    alignItems: 'center',
  },
  roomSectionSubtitle: {
    fontSize: 14,
    color: '#6B7280',
    marginBottom: 16,
    fontStyle: 'italic',
  },
  appointmentInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#EBF4FF',
    padding: 12,
    marginBottom: 16,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#BFDBFE',
  },
  appointmentInfoText: {
    marginLeft: 8,
    fontSize: 14,
    color: '#1E40AF',
    flex: 1,
  },
});

export default PatientRegistrationModal;