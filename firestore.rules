// Firestore Security Rules for KBR Life Care Hospital App
// These rules allow public read access to certain collections while securing write operations

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Allow public read access to rooms collection (for displaying available rooms)
    match /rooms/{roomId} {
      allow read: if true; // Public read access
      allow create, update, delete: if isAuthenticated() && isAdmin();
    }
    
    // Allow public read access to doctors collection (for booking appointments)
    match /doctors/{doctorId} {
      allow read: if true; // Public read access
      allow create, update, delete: if isAuthenticated() && isAdmin();
    }
    
    // Allow public read access to services collection (for displaying available services)
    match /services/{serviceId} {
      allow read: if true; // Public read access
      allow create, update, delete: if isAuthenticated() && isAdmin();
    }
    
    // Allow public read access to invoices (for transparency)
    match /invoices/{invoiceId} {
      allow read: if true; // Public read access
      allow create, update, delete: if isAuthenticated() && isAdmin();
    }
    
    // Allow public read access to payments (for transparency)
    match /payments/{paymentId} {
      allow read: if true; // Public read access
      allow create: if isAuthenticated(); // Any authenticated user can create payments
      allow update, delete: if isAuthenticated() && isAdmin();
    }
    
    // Allow public read access to medical reports
    match /medicalReports/{reportId} {
      allow read: if true; // Public read access
      allow create, update, delete: if isAuthenticated() && isAdmin();
    }
    
    // Appointments - public read, authenticated users can create
    match /appointments/{appointmentId} {
      allow read: if true; // Public read access
      allow create: if isAuthenticated(); // Any authenticated user can book appointments
      allow update, delete: if isAuthenticated() && (isOwner(resource.data.patientId) || isAdmin());
    }
    
    // User profiles - users can only access their own data
    match /users/{userId} {
      allow read, write: if isAuthenticated() && (isOwner(userId) || isAdmin());
    }
    
    // Patient records - restricted to admins and the patient themselves
    match /patients/{patientId} {
      allow read, write: if isAuthenticated() && (isOwner(patientId) || isAdmin());
    }
    
    // Admin-only collections
    match /admissions/{admissionId} {
      allow read, write: if isAuthenticated() && isAdmin();
    }
    
    match /discharges/{dischargeId} {
      allow read, write: if isAuthenticated() && isAdmin();
    }
    
    match /medicalHistory/{historyId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.patientId) || isAdmin());
      allow create, update, delete: if isAuthenticated() && isAdmin();
    }
    
    // Test collections (for development)
    match /test/{testId} {
      allow read, write: if true; // Allow all access for testing
    }
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             resource.data.role == 'admin' || 
             request.auth.token.role == 'admin' ||
             request.auth.token.email == 'thukaram2388@gmail.com'; // Admin email
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
  }
}